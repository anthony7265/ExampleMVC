//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExampleMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class INVENTORYMNGDBEntities : DbContext
    {
        public INVENTORYMNGDBEntities()
            : base("name=INVENTORYMNGDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Nullable<decimal>> spCompanyInsert(Nullable<int> countryID, string companyName, string companyAddress, string companyContact, string companyEmail, string companyPhone, string companyFax, byte[] companyAvatar, Nullable<int> createdBy)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("companyAddress", companyAddress) :
                new ObjectParameter("companyAddress", typeof(string));
    
            var companyContactParameter = companyContact != null ?
                new ObjectParameter("companyContact", companyContact) :
                new ObjectParameter("companyContact", typeof(string));
    
            var companyEmailParameter = companyEmail != null ?
                new ObjectParameter("companyEmail", companyEmail) :
                new ObjectParameter("companyEmail", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("companyPhone", companyPhone) :
                new ObjectParameter("companyPhone", typeof(string));
    
            var companyFaxParameter = companyFax != null ?
                new ObjectParameter("companyFax", companyFax) :
                new ObjectParameter("companyFax", typeof(string));
    
            var companyAvatarParameter = companyAvatar != null ?
                new ObjectParameter("companyAvatar", companyAvatar) :
                new ObjectParameter("companyAvatar", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spCompanyInsert", countryIDParameter, companyNameParameter, companyAddressParameter, companyContactParameter, companyEmailParameter, companyPhoneParameter, companyFaxParameter, companyAvatarParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCompanyUpdate(Nullable<int> companyID, Nullable<int> countryID, string companyName, string companyAddress, string companyContact, string companyEmail, string companyPhone, string companyFax, byte[] companyAvatar, Nullable<int> createdBy)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("companyName", companyName) :
                new ObjectParameter("companyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("companyAddress", companyAddress) :
                new ObjectParameter("companyAddress", typeof(string));
    
            var companyContactParameter = companyContact != null ?
                new ObjectParameter("companyContact", companyContact) :
                new ObjectParameter("companyContact", typeof(string));
    
            var companyEmailParameter = companyEmail != null ?
                new ObjectParameter("companyEmail", companyEmail) :
                new ObjectParameter("companyEmail", typeof(string));
    
            var companyPhoneParameter = companyPhone != null ?
                new ObjectParameter("companyPhone", companyPhone) :
                new ObjectParameter("companyPhone", typeof(string));
    
            var companyFaxParameter = companyFax != null ?
                new ObjectParameter("companyFax", companyFax) :
                new ObjectParameter("companyFax", typeof(string));
    
            var companyAvatarParameter = companyAvatar != null ?
                new ObjectParameter("companyAvatar", companyAvatar) :
                new ObjectParameter("companyAvatar", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCompanyUpdate", companyIDParameter, countryIDParameter, companyNameParameter, companyAddressParameter, companyContactParameter, companyEmailParameter, companyPhoneParameter, companyFaxParameter, companyAvatarParameter, createdByParameter);
        }
    
        public virtual ObjectResult<spGetCompanyInformation_Result> spGetCompanyInformation(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("companyID", companyID) :
                new ObjectParameter("companyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCompanyInformation_Result>("spGetCompanyInformation", companyIDParameter);
        }
    }
}
